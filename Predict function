def process_image(image_path):
     # TODO: Process a PIL image for use in a PyTorch model
    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,
        returns an Numpy array
    '''
    norm_mean = np.array([0.485, 0.456, 0.406])
    norm_sd = np.array([0.229, 0.224, 0.225])
    
    image = Image.open(image_path)
    
    width, height = image.size
    if width > height:
        height = 256
    elif width == height:
        width = 256
        height = 256
    else:
        width = 256
     
    image.resize((width, height))
    image.crop(((width - 224)/2, (height - 224)/2, (width + 224)/2, (height + 224)/2)) 
    np_image = np.array(image)
    np_image = np_image / 255
    np_image = (np_image - norm_mean)/norm_sd
    np_image = np_image.transpose((2, 0, 1))
    return np_image
   





def predict(image_path, model, topk=5):
    ''' Predict the class (or classes) of an image using a trained deep learning model.
    '''
    model = load_checkpoint('checkpoint.pth')
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    model.eval()
    image = process_image(image_path)
    image_tensor = torch.from_numpy(image).type(torch.FloatTensor).unsqueeze_(0)
    
    inputs = torch.tensor([image_tensor]).to(device)
    
    with torch.no_grad():
        logps = model.forward(inputs)
        ps = torch.exp(logps)
        top_p, top_index = ps.topk(5, dim = 1)
        index_to_class = {value:key for key, value in model.class_to_idx.items()}
        top_classes = list(map(lambda index: index_to_class[index], np.array(top_index.cpu())[0]))
        top_flowers = [cat_to_name[classes] for classes in top_classes ]
    return top_p, top_classes      
